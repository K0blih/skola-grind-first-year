// **************************************************************************
//
//               Demo program for labs
//
// Subject:      Computer Architectures and Parallel systems
// Author:       Petr Olivka, petr.olivka@vsb.cz, 09/2019
// Organization: Department of Computer Science, FEECS,
//               VSB-Technical University of Ostrava, CZ
//
// File:         OpenCV simulator of LCD
//
// **************************************************************************

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>

#include "lcd_lib.h"
#include "font8x8.h"
#include "graph_class.hpp"

int32_t tab_sin[] = {
    0,   17,   34,   52,   69,   87,  104,  121,  139,  156,  173,  190,  207,  224,  241,
   258,  275,  292,  309,  325,  342,  358,  374,  390,  406,  422,  438,  453,  469,  484,
   499,  515,  529,  544,  559,  573,  587,  601,  615,  629,  642,  656,  669,  681,  694,
   707,  719,  731,  743,  754,  766,  777,  788,  798,  809,  819,  829,  838,  848,  857,
   866,  874,  882,  891,  898,  906,  913,  920,  927,  933,  939,  945,  951,  956,  961,
   965,  970,  974,  978,  981,  984,  987,  990,  992,  994,  996,  997,  998,  999,  999,
  1000,  999,  999,  998,  997,  996,  994,  992,  990,  987,  984,  981,  978,  974,  970,
   965,  961,  956,  951,  945,  939,  933,  927,  920,  913,  906,  898,  891,  882,  874,
   866,  857,  848,  838,  829,  819,  809,  798,  788,  777,  766,  754,  743,  731,  719,
   707,  694,  681,  669,  656,  642,  629,  615,  601,  587,  573,  559,  544,  529,  515,
   499,  484,  469,  453,  438,  422,  406,  390,  374,  358,  342,  325,  309,  292,  275,
   258,  241,  224,  207,  190,  173,  156,  139,  121,  104,   87,   69,   52,   34,   17,
     0,  -17,  -34,  -52,  -69,  -87, -104, -121, -139, -156, -173, -190, -207, -224, -241,
  -258, -275, -292, -309, -325, -342, -358, -374, -390, -406, -422, -438, -453, -469, -484,
  -500, -515, -529, -544, -559, -573, -587, -601, -615, -629, -642, -656, -669, -681, -694,
  -707, -719, -731, -743, -754, -766, -777, -788, -798, -809, -819, -829, -838, -848, -857,
  -866, -874, -882, -891, -898, -906, -913, -920, -927, -933, -939, -945, -951, -956, -961,
  -965, -970, -974, -978, -981, -984, -987, -990, -992, -994, -996, -997, -998, -999, -999,
  -1000, -999, -999, -998, -997, -996, -994, -992, -990, -987, -984, -981, -978, -974, -970,
  -965, -961, -956, -951, -945, -939, -933, -927, -920, -913, -906, -898, -891, -882, -874,
  -866, -857, -848, -838, -829, -819, -809, -798, -788, -777, -766, -754, -743, -731, -719,
  -707, -694, -681, -669, -656, -642, -629, -615, -601, -587, -573, -559, -544, -529, -515,
  -500, -484, -469, -453, -438, -422, -406, -390, -374, -358, -342, -325, -309, -292, -275,
  -258, -241, -224, -207, -190, -173, -156, -139, -121, -104,  -87,  -69,  -52,  -34,  -17,
     0
};

int32_t tab_cos[] = {
  1000,  999,  999,  998,  997,  996,  994,  992,  990,  987,  984,  981,  978,  974,  970,
   965,  961,  956,  951,  945,  939,  933,  927,  920,  913,  906,  898,  891,  882,  874,
   866,  857,  848,  838,  829,  819,  809,  798,  788,  777,  766,  754,  743,  731,  719,
   707,  694,  681,  669,  656,  642,  629,  615,  601,  587,  573,  559,  544,  529,  515,
   500,  484,  469,  453,  438,  422,  406,  390,  374,  358,  342,  325,  309,  292,  275,
   258,  241,  224,  207,  190,  173,  156,  139,  121,  104,   87,   69,   52,   34,   17,
     0,  -17,  -34,  -52,  -69,  -87, -104, -121, -139, -156, -173, -190, -207, -224, -241,
  -258, -275, -292, -309, -325, -342, -358, -374, -390, -406, -422, -438, -453, -469, -484,
  -499, -515, -529, -544, -559, -573, -587, -601, -615, -629, -642, -656, -669, -681, -694,
  -707, -719, -731, -743, -754, -766, -777, -788, -798, -809, -819, -829, -838, -848, -857,
  -866, -874, -882, -891, -898, -906, -913, -920, -927, -933, -939, -945, -951, -956, -961,
  -965, -970, -974, -978, -981, -984, -987, -990, -992, -994, -996, -997, -998, -999, -999,
 -1000, -999, -999, -998, -997, -996, -994, -992, -990, -987, -984, -981, -978, -974, -970,
  -965, -961, -956, -951, -945, -939, -933, -927, -920, -913, -906, -898, -891, -882, -874,
  -866, -857, -848, -838, -829, -819, -809, -798, -788, -777, -766, -754, -743, -731, -719,
  -707, -694, -681, -669, -656, -642, -629, -615, -601, -587, -573, -559, -544, -529, -515,
  -500, -484, -469, -453, -438, -422, -406, -390, -374, -358, -342, -325, -309, -292, -275,
  -258, -241, -224, -207, -190, -173, -156, -139, -121, -104,  -87,  -69,  -52,  -34,  -17,
     0,   17,   34,   52,   69,   87,  104,  121,  139,  156,  173,  190,  207,  224,  241,
   258,  275,  292,  309,  325,  342,  358,  374,  390,  406,  422,  438,  453,  469,  484,
   500,  515,  529,  544,  559,  573,  587,  601,  615,  629,  642,  656,  669,  681,  694,
   707,  719,  731,  743,  754,  766,  777,  788,  798,  809,  819,  829,  838,  848,  857,
   866,  874,  882,  891,  898,  906,  913,  920,  927,  933,  939,  945,  951,  956,  961,
   965,  970,  974,  978,  981,  984,  987,  990,  992,  994,  996,  997,  998,  999,  999,
  1000
};

int main()
{
    lcd_init();                     // LCD initialization

    // uint16_t l_color_red = 0xF800;
    // uint16_t l_color_green = 0x07E0;
    // uint16_t l_color_blue = 0x001F;
    uint16_t l_color_white = 0xFFFF;
    uint16_t l_color_black = 0x0000;

    int l_xc = 240;
    int l_yc = 130;
    int l_r_hand = 110;
    int l_r_circle = 129;
    int l_r_scroll = 8;

    Line l_scroll_line1({100, 280}, {380, 280}, l_color_white, l_color_black);
    Line l_scroll_line2({100, 300}, {380, 300}, l_color_white, l_color_black);
    Line l_hand({l_xc, l_yc - l_r_hand}, {l_xc, l_yc}, l_color_white, l_color_black);
    Circle l_scroll_circle({100, 290}, l_r_scroll, l_color_white, l_color_black);
    Circle l_circle({l_xc, l_yc}, l_r_circle, l_color_white, l_color_black);

    l_scroll_line1.draw();
    l_scroll_line2.draw();
    l_hand.draw();
    l_circle.draw();
    l_scroll_circle.draw();

    int g_angle = 0;
    bool g_redraw = true;
    int some_limit = 280;

    while (true)
    {
      cts_points_t l_tpoints;
    
      // read data from Touch Screen
      int l_num = cts_get_ts_points( &l_tpoints );
    
      if ( l_num > 0 )
      {
        if ( l_tpoints.m_points[ 0 ].y > some_limit )
        {
            // if touch position is detected on the bottom of LCD, then the detected x touch position 
            // will be used for new angle position
            g_angle = (l_tpoints.m_points[ 0 ].x - 100) * 360 / (380 - 100);
            g_redraw = true;
        }
      }
      else
      {
          // When no touch â€” ease the hand back to zero
          if (g_angle > 0) {
                g_angle--;  // reduce angle step by step
                g_redraw = true;
                delay_ms(10);
          }
          else if (g_angle < 0) {
                g_angle++;  // fix for negative angles
                g_redraw = true;
                delay_ms(10);
          }
      }
    
      if ( g_redraw )
      { // redraw only when it is necessary
        l_scroll_circle.hide();
        l_hand.hide();
    
        // for sin/cos use table with precalculated values. 
        l_hand.m_start.x = tab_cos[ g_angle ] * l_r_hand / 1000 + l_xc;
        l_hand.m_start.y = tab_sin[ g_angle ] * l_r_hand / 1000 + l_yc;
        l_scroll_circle.m_center.x = g_angle;
    
        l_scroll_circle.draw();
        l_hand.draw();
    
        g_redraw = false;
      }
    }

    cv::imshow( LCD_NAME, g_canvas );   // refresh content of "LCD"
    cv::waitKey( 0 );                   // wait for key 
}


